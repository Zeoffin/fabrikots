"""
Django settings for fabrikots project.

Generated by 'django-admin startproject' using Django 5.0.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

import os
from pathlib import Path
from decouple import config

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config('SRC_ENV', default='PRODUCTION') == 'LOCAL'

# Allowed hosts configuration
if DEBUG:
    ALLOWED_HOSTS = ['127.0.0.1', 'localhost']
else:
    # Production hosts
    allowed_hosts = ['fabrikots-production.up.railway.app']
    
    # Add custom domain if provided
    custom_domain = config('ALLOWED_HOST', default=None)
    if custom_domain:
        allowed_hosts.append(custom_domain)
    
    ALLOWED_HOSTS = allowed_hosts

# Application definition

INSTALLED_APPS = [
    'daphne',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'corsheaders',
    'fbkquizz',
    'user_api'
]

ASGI_APPLICATION = 'fabrikots.asgi.application'

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'fabrikots.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'fabrikots.wsgi.application'

REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    ),
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework.authentication.SessionAuthentication',
    ),
}

# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

# Use PostgreSQL for production if DATABASE_URL is provided, otherwise SQLite
database_url = config('DATABASE_URL', default=None)
if database_url and not DEBUG:
    import dj_database_url
    DATABASES = {
        'default': dj_database_url.parse(database_url)
    }
else:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'fabrikots.sqlite3',
        }
    }


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'

# Static files directories
STATICFILES_DIRS = []

# Add static directory if it exists (for production builds with React frontend)
if (BASE_DIR / 'static').exists():
    STATICFILES_DIRS.append(BASE_DIR / 'static')

# For production, also include the built frontend
if not DEBUG and (BASE_DIR / 'static' / 'frontend').exists():
    STATICFILES_DIRS.append(BASE_DIR / 'static' / 'frontend')

# WhiteNoise configuration
WHITENOISE_USE_FINDERS = True
WHITENOISE_AUTOREFRESH = True

# Media files (uploaded files)
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# CORS Settings
if DEBUG:
    # Development CORS settings
    ALLOWED_ORIGINS = [
        'http://localhost:5173',
        'http://127.0.0.1:5173',
    ]
else:
    # Production CORS settings
    allowed_origins = ['https://fabrikots-production.up.railway.app']
    
    # Add custom domain if provided
    custom_domain = config('ALLOWED_HOST', default=None)
    if custom_domain:
        allowed_origins.append(f'https://{custom_domain}')
    
    ALLOWED_ORIGINS = allowed_origins

CSRF_TRUSTED_ORIGINS = ALLOWED_ORIGINS
CORS_ALLOW_CREDENTIALS = True
CORS_ALLOWED_ORIGINS = ALLOWED_ORIGINS

# Channels

# Redis configuration for channels
if DEBUG:
    # Local development
    CHANNEL_LAYERS = {
        'default': {
            'BACKEND': "channels_redis.core.RedisChannelLayer",
            'CONFIG': {
                'hosts': [('127.0.0.1', 6379)],
            },
        },
    }
else:
    # Production - use Railway's Redis URL if available, otherwise in-memory
    redis_url = config('REDIS_URL', default=None)
    if redis_url:
        CHANNEL_LAYERS = {
            'default': {
                'BACKEND': "channels_redis.core.RedisChannelLayer",
                'CONFIG': {
                    'hosts': [redis_url],
                },
            },
        }
    else:
        # Fallback to in-memory channel layer
        CHANNEL_LAYERS = {
            'default': {
                'BACKEND': "channels.layers.InMemoryChannelLayer",
            },
        }